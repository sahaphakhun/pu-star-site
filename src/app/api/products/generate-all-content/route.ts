import { NextRequest, NextResponse } from 'next/server';
import connectDB from '@/lib/db';
import Product from '@/models/Product';
import { verifyToken } from '@/lib/auth';

// GET: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Markdown ‡πÅ‡∏•‡∏∞ JSON
export async function GET(request: NextRequest) {
  try {
    const authResult = await verifyToken(request);
    if (!authResult || !authResult.valid) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const format = searchParams.get('format') || 'both'; // 'markdown', 'json', 'both'
    const category = searchParams.get('category'); // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    const includeInactive = searchParams.get('includeInactive') === 'true'; // ‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    const detail = searchParams.get('detail') === 'summary' ? 'summary' : 'full';
    
    await connectDB();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    let query: any = {};
    if (category && category !== 'all') {
      query.category = category;
    }
    if (!includeInactive) {
      query.isAvailable = { $ne: false };
    }
    
    const products = await Product.find(query).sort({ category: 1, name: 1 }).lean();
    
    if (products.length === 0) {
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' }, { status: 404 });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allProductsContent = generateAllProductsContent(products, detail);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    if (format === 'markdown') {
      return new NextResponse(allProductsContent.markdown, {
        headers: {
          'Content-Type': 'text/markdown; charset=utf-8',
          'Content-Disposition': `attachment; filename="all-products-content.md"`
        }
      });
    } else if (format === 'json') {
      return NextResponse.json(allProductsContent.json, {
        headers: {
          'Content-Disposition': `attachment; filename="all-products-content.json"`
        }
      });
    } else {
      // ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
      return NextResponse.json(allProductsContent);
    }
  } catch (error) {
    console.error('Error generating all products content:', error);
    return NextResponse.json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' }, { status: 500 });
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function generateAllProductsContent(products: any[], detail: 'full' | 'summary') {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Markdown content
  const markdown = generateAllProductsMarkdown(products, detail);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON content
  const json = generateAllProductsJSON(products);

  return { markdown, json };
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Markdown content ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export function generateAllProductsMarkdown(products: any[], detail: 'full' | 'summary') {
  let markdown = `# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\n`;
  markdown += `**‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á**: ${new Date().toLocaleDateString('th-TH')}\n`;
  markdown += `**‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á**: ${new Date().toLocaleTimeString('th-TH')}\n`;
  markdown += `**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**: ${products.length}\n\n`;
  
  // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  const productsByCategory = products.reduce((acc: any, product) => {
    const category = product.category || '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ';
    if (!acc[category]) {
      acc[category] = [];
    }
    acc[category].push(product);
    return acc;
  }, {});

  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  Object.keys(productsByCategory).sort().forEach(category => {
    const categoryProducts = productsByCategory[category];

    markdown += `## üìÅ ${category}\n`;
    markdown += `**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤**: ${categoryProducts.length}\n\n`;

    if (detail === 'summary') {
      // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
      markdown += `| ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ | ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ | ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô | ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô | SKU Variants |\n`;
      markdown += `|---|---|---|---|---|\n`;
      categoryProducts.forEach((product: any) => {
        const status = product.isAvailable !== false ? '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢' : '‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î';
        const price = product.price !== undefined ? `‡∏ø${product.price.toLocaleString()}` : '-';
        const shippingFee = product.shippingFee !== undefined ? `‡∏ø${product.shippingFee.toLocaleString()}` : '-';
        const skuCount = product.skuVariants && product.skuVariants.length > 0 ? product.skuVariants.length : '-';
        markdown += `| ${product.name} | ${status} | ${price} | ${shippingFee} | ${skuCount} |\n`;
      });
      markdown += `\n`;

      // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
      markdown += `**‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠**\n`;
      categoryProducts.forEach((product: any) => {
        const desc = product.description || '';
        const shortDesc = desc.length > 100 ? desc.slice(0, 100) + '...' : desc;
        if (shortDesc) {
          markdown += `**${product.name}**: ${shortDesc}\n`;
        }
      });
      markdown += `\n`;
    } else {
      // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
      categoryProducts.forEach((product: any, index: number) => {
        markdown += `### ${index + 1}. ${product.name}\n`;
        markdown += `- **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞**: ${product.isAvailable !== false ? '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢' : '‚ùå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î'}\n`;
        markdown += `- **‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î**: ${product.description}\n`;

        if (product.price !== undefined) {
          markdown += `- **‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô**: ‡∏ø${product.price.toLocaleString()}\n`;
        }
        if (typeof product.shippingFee === 'number') {
          markdown += `- **‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô**: ‡∏ø${product.shippingFee.toLocaleString()}\n`;
        }

        if (product.units && product.units.length > 0) {
          markdown += `- **‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤**: ${product.units.length} ‡∏´‡∏ô‡πà‡∏ß‡∏¢\n`;
          product.units.forEach((unit: any) => {
            const unitDetails = [
              `‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ø${unit.price.toLocaleString()}`,
              unit.shippingFee !== undefined
                ? `‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á ‡∏ø${unit.shippingFee.toLocaleString()}`
                : null,
              unit.multiplier !== undefined ? `‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì ${unit.multiplier}` : null,
            ]
              .filter(Boolean)
              .join(', ');
            markdown += `  - ${unit.label}: ${unitDetails}\n`;
          });
        }

        if (product.options && product.options.length > 0) {
          markdown += `- **‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å**: ${product.options.length} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó\n`;
          product.options.forEach((option: any) => {
            const values = (option.values || [])
              .map(
                (v: any) =>
                  `${v.label} (${v.isAvailable === false ? '‚ùå' : '‚úÖ'})`
              )
              .join(', ');
            markdown += `  - ${option.name}: ${values}\n`;
          });
        }

        // SKU Information
        if (product.skuConfig) {
          markdown += `- **SKU**: ${product.skuConfig.autoGenerate ? '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥' : '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á'}\n`;
          if (product.skuVariants && product.skuVariants.length > 0) {
            markdown += `- **SKU Variants**: ${product.skuVariants.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
          }
        } else {
          markdown += `- **SKU**: ‡πÑ‡∏°‡πà‡∏°‡∏µ\n`;
        }

        markdown += `\n`;
      });
    }
  });

  // ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SKU
  markdown += `## üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SKU\n`;
  const skuStats = getSkuStatistics(products);
  markdown += `- **‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ SKU**: ${skuStats.productsWithSku}\n`;
  markdown += `- **‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ SKU**: ${skuStats.productsWithoutSku}\n`;
  markdown += `- **SKU Variants ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**: ${skuStats.totalSkuVariants}\n`;
  markdown += `- **SKU ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**: ${skuStats.activeSkuVariants}\n`;
  markdown += `- **SKU ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**: ${skuStats.inactiveSkuVariants}\n\n`;

  // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI
  markdown += `## ü§ñ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ \n`;
  markdown += `\`\`\`\n`;
  markdown += `- **‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï**: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï realtime ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô https://www.winrichdynamic.com/\n`;
  markdown += `- **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á**: ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)\n`;
  markdown += `\`\`\`\n`;

  return markdown;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON content ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export function generateAllProductsJSON(products: any[]) {
  const skuStats = getSkuStatistics(products);
  
  const jsonContent = {
    summary: {
      totalProducts: products.length,
      generatedAt: new Date().toISOString(),
      format: "JSON",
      version: "1.0",
      purpose: "AI Content Generation for All Products"
    },
    categories: Object.keys(products.reduce((acc: any, product) => {
      const category = product.category || '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ';
      acc[category] = true;
      return acc;
    }, {})),
    skuStatistics: skuStats,
    products: products.map(product => ({
      id: product._id,
      name: product.name,
      description: product.description,
      category: product.category || '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
      isAvailable: product.isAvailable !== false,
      price: product.price !== undefined ? product.price : null,
      shippingFee: product.shippingFee !== undefined ? product.shippingFee : null,
      units: (product.units || []).map((u: any) => ({
        ...u,
        shippingFee: u.shippingFee !== undefined ? u.shippingFee : null,
      })),
      options: product.options || [],
      skuConfig: product.skuConfig || null,
      skuVariants: product.skuVariants || [],
      createdAt: product.createdAt,
      updatedAt: product.updatedAt
    })),
    aiInstructions: {
      purpose: "AI Content Generation for All Products Marketing",
      requirements: [
        "‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤",
        "‡∏£‡∏∞‡∏ö‡∏∏ SKU ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô",
        "‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
        "‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
        "‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô",
        "‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
        "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
      ],
      contentTypes: [
        "‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        "‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        "‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        "‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏£‡∏ß‡∏°",
        "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
      ],
      tone: "‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£, ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ, ‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠, ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°",
      targetAudience: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á‡πÜ"
    },
    metadata: {
      generatedAt: new Date().toISOString(),
      format: "JSON",
      version: "1.0",
      purpose: "AI Content Generation for All Products"
    }
  };
  
  return jsonContent;
}

 

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ SKU
function getSkuStatistics(products: any[]) {
  let productsWithSku = 0;
  let productsWithoutSku = 0;
  let totalSkuVariants = 0;
  let activeSkuVariants = 0;
  let inactiveSkuVariants = 0;

  products.forEach(product => {
    if (product.skuConfig) {
      productsWithSku++;
      if (product.skuVariants && product.skuVariants.length > 0) {
        totalSkuVariants += product.skuVariants.length;
        product.skuVariants.forEach((variant: any) => {
          if (variant.isActive) {
            activeSkuVariants++;
          } else {
            inactiveSkuVariants++;
          }
        });
      }
    } else {
      productsWithoutSku++;
    }
  });

  return {
    productsWithSku,
    productsWithoutSku,
    totalSkuVariants,
    activeSkuVariants,
    inactiveSkuVariants
  };
}
