'use client';

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import toast from 'react-hot-toast';
import { 
  getCustomerTypeLabel, 
  getCustomerTypeColor 
} from '@/utils/customerAnalytics';

interface Customer {
  _id: string;
  name: string;
  phoneNumber: string;
  email?: string;
  customerType: 'new' | 'regular' | 'target' | 'inactive';
  assignedTo?: string;
  taxId?: string;
  totalOrders: number;
  totalSpent: number;
  averageOrderValue: number;
  lastOrderDate?: Date;
  createdAt: Date;
}

const InactiveCustomersPage: React.FC = () => {
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [showWinBackModal, setShowWinBackModal] = useState(false);
  const [winBackMessage, setWinBackMessage] = useState('');
  const [selectedCustomers, setSelectedCustomers] = useState<string[]>([]);
  
  // Filters
  const [searchTerm, setSearchTerm] = useState('');
  const [assignedToFilter, setAssignedToFilter] = useState('');
  const [sortBy, setSortBy] = useState('lastOrderDate');
  const [sortOrder, setSortOrder] = useState('asc');
  const [minDaysInactive, setMinDaysInactive] = useState('90');
  const [maxDaysInactive, setMaxDaysInactive] = useState('');
  
  // Pagination
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalCustomers, setTotalCustomers] = useState(0);

  // Stats
  const [stats, setStats] = useState({
    totalInactiveCustomers: 0,
    recentlyInactive: 0, // 90-180 ‡∏ß‡∏±‡∏ô
    longTermInactive: 0, // >180 ‡∏ß‡∏±‡∏ô
    potentialRevenue: 0,
    averageDaysInactive: 0,
    riskCustomers: [] as Customer[]
  });

  const fetchCustomers = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: '20',
        search: searchTerm,
        customerType: 'inactive', // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢
        assignedTo: assignedToFilter,
        sortBy,
        sortOrder,
      });

      const response = await fetch(`/api/admin/customers?${params}`);
      const data = await response.json();

      if (data.success) {
        setCustomers(data.data.customers);
        setTotalPages(data.data.pagination.totalPages);
        setTotalCustomers(data.data.pagination.totalCustomers);
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        const inactiveCustomers = data.data.customers;
        const now = new Date();
        
        let totalDaysInactive = 0;
        let recentlyInactive = 0;
        let longTermInactive = 0;
        let potentialRevenue = 0;
        
        inactiveCustomers.forEach((customer: Customer) => {
          const daysSinceOrder = getDaysSinceLastOrder(customer.lastOrderDate);
          totalDaysInactive += daysSinceOrder;
          
          if (daysSinceOrder >= 90 && daysSinceOrder <= 180) {
            recentlyInactive++;
          } else if (daysSinceOrder > 180) {
            longTermInactive++;
          }
          
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå)
          potentialRevenue += customer.averageOrderValue || 0;
        });
        
        const averageDaysInactive = inactiveCustomers.length > 0 ? 
          Math.round(totalDaysInactive / inactiveCustomers.length) : 0;
        
        // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á (‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢)
        const riskCustomers = inactiveCustomers
          .filter((c: Customer) => (c.totalSpent || 0) > 5000)
          .sort((a: Customer, b: Customer) => (b.totalSpent || 0) - (a.totalSpent || 0))
          .slice(0, 5);
        
        setStats({
          totalInactiveCustomers: inactiveCustomers.length,
          recentlyInactive,
          longTermInactive,
          potentialRevenue,
          averageDaysInactive,
          riskCustomers
        });
      } else {
        toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
      }
    } catch (error) {
      console.error('Error fetching customers:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCustomers();
  }, [currentPage, searchTerm, assignedToFilter, sortBy, sortOrder, minDaysInactive, maxDaysInactive]);

  const handleSendWinBackMessage = async () => {
    if (!selectedCustomer || !winBackMessage.trim()) {
      toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö');
      return;
    }

    try {
      // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      toast.success('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      setShowWinBackModal(false);
      setWinBackMessage('');
    } catch (error) {
      console.error('Error sending win-back message:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
    }
  };

  const handleBulkWinBack = async () => {
    if (selectedCustomers.length === 0) {
      toast.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
      return;
    }

    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
      toast.success(`‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ${selectedCustomers.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      setSelectedCustomers([]);
    } catch (error) {
      console.error('Error sending bulk win-back:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
    }
  };

  const resetFilters = () => {
    setSearchTerm('');
    setAssignedToFilter('');
    setSortBy('lastOrderDate');
    setSortOrder('asc');
    setMinDaysInactive('90');
    setMaxDaysInactive('');
    setCurrentPage(1);
  };

  const getDaysSinceLastOrder = (lastOrderDate?: Date) => {
    if (!lastOrderDate) return 999;
    const now = new Date();
    const diffTime = now.getTime() - new Date(lastOrderDate).getTime();
    return Math.floor(diffTime / (1000 * 60 * 60 * 24));
  };

  const getInactiveLevel = (daysSinceOrder: number) => {
    if (daysSinceOrder <= 90) return { label: '‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢', color: 'bg-yellow-100 text-yellow-800', icon: '‚ö†Ô∏è' };
    if (daysSinceOrder <= 180) return { label: '‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', color: 'bg-orange-100 text-orange-800', icon: 'üîî' };
    if (daysSinceOrder <= 365) return { label: '‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢‡∏ô‡∏≤‡∏ô', color: 'bg-red-100 text-red-800', icon: 'üö®' };
    return { label: '‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏õ‡∏µ', color: 'bg-gray-100 text-gray-800', icon: 'üíÄ' };
  };

  const toggleCustomerSelection = (customerId: string) => {
    setSelectedCustomers(prev => 
      prev.includes(customerId) 
        ? prev.filter(id => id !== customerId)
        : [...prev, customerId]
    );
  };

  const toggleAllCustomers = () => {
    if (selectedCustomers.length === customers.length) {
      setSelectedCustomers([]);
    } else {
      setSelectedCustomers(customers.map(c => c._id));
    }
  };

  if (loading && customers.length === 0) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢</h1>
          <p className="text-gray-600">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°</p>
        </div>
        <div className="flex items-center space-x-2">
          <div className="bg-red-100 text-red-800 px-3 py-1 rounded-full text-sm font-medium">
            üò¥ {totalCustomers.toLocaleString()} ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢
          </div>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        <div className="bg-white p-4 rounded-lg shadow border">
          <h3 className="text-sm font-medium text-gray-500">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
          <p className="text-2xl font-bold text-red-600">{stats.totalInactiveCustomers.toLocaleString()}</p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow border">
          <h3 className="text-sm font-medium text-gray-500">‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢</h3>
          <p className="text-2xl font-bold text-orange-600">{stats.recentlyInactive.toLocaleString()}</p>
          <p className="text-xs text-gray-500">90-180 ‡∏ß‡∏±‡∏ô</p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow border">
          <h3 className="text-sm font-medium text-gray-500">‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢‡∏ô‡∏≤‡∏ô</h3>
          <p className="text-2xl font-bold text-gray-600">{stats.longTermInactive.toLocaleString()}</p>
          <p className="text-xs text-gray-500">&gt;180 ‡∏ß‡∏±‡∏ô</p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow border">
          <h3 className="text-sm font-medium text-gray-500">‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ß‡∏±‡∏ô‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢</h3>
          <p className="text-2xl font-bold text-purple-600">{stats.averageDaysInactive}</p>
          <p className="text-xs text-gray-500">‡∏ß‡∏±‡∏ô</p>
        </div>
      </div>

      {/* Potential Revenue */}
      <div className="bg-white p-4 rounded-lg shadow border mb-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-2">üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢</h3>
        <p className="text-2xl font-bold text-red-600">‡∏ø{stats.potentialRevenue.toLocaleString()}</p>
        <p className="text-sm text-gray-600">‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢</p>
      </div>

      {/* Risk Customers */}
      {stats.riskCustomers.length > 0 && (
        <div className="bg-white p-4 rounded-lg shadow border mb-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">üö® ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á</h3>
          <p className="text-sm text-gray-600 mb-4">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢‡πÑ‡∏õ</p>
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            {stats.riskCustomers.map((customer, index) => (
              <div key={customer._id} className="text-center p-3 bg-red-50 rounded-lg">
                <div className="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-2">
                  <span className="text-red-800 font-bold text-sm">üö®</span>
                </div>
                <p className="text-sm font-medium text-gray-900">{customer.name}</p>
                <p className="text-xs text-gray-500">{customer.phoneNumber}</p>
                <p className="text-sm font-bold text-red-600">‡∏ø{(customer.totalSpent || 0).toLocaleString()}</p>
                <p className="text-xs text-gray-500">{customer.totalOrders || 0} ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</p>
                <p className="text-xs text-red-600">
                  {getDaysSinceLastOrder(customer.lastOrderDate)} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
                </p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Win-Back Actions */}
      <div className="bg-white p-4 rounded-lg shadow border mb-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">üéØ ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="text-center p-4 bg-blue-50 rounded-lg">
            <div className="text-2xl mb-2">üìß</div>
            <h4 className="font-medium text-gray-900">‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö</h4>
            <p className="text-sm text-gray-600 mb-3">‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢</p>
            <button 
              onClick={() => {
                if (customers.length > 0) {
                  setSelectedCustomer(customers[0]);
                  setWinBackMessage('‡πÄ‡∏£‡∏≤‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤! ‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© 20% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ üéÅ');
                  setShowWinBackModal(true);
                }
              }}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 text-sm"
            >
              ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            </button>
          </div>
          <div className="text-center p-4 bg-green-50 rounded-lg">
            <div className="text-2xl mb-2">üéÅ</div>
            <h4 className="font-medium text-gray-900">‡∏™‡πà‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©</h4>
            <p className="text-sm text-gray-600 mb-3">‡∏™‡πà‡∏á‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©</p>
            <button 
              onClick={handleBulkWinBack}
              disabled={selectedCustomers.length === 0}
              className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 text-sm disabled:opacity-50 disabled:cursor-not-allowed"
            >
              ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ({selectedCustomers.length})
            </button>
          </div>
          <div className="text-center p-4 bg-purple-50 rounded-lg">
            <div className="text-2xl mb-2">üìû</div>
            <h4 className="font-medium text-gray-900">‡πÇ‡∏ó‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°</h4>
            <p className="text-sm text-gray-600 mb-3">‡πÇ‡∏ó‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á</p>
            <button className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 text-sm">
              ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
            </button>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="bg-white p-4 rounded-lg shadow border mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</label>
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="‡∏ä‡∏∑‡πà‡∏≠, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö</label>
            <input
              type="text"
              value={assignedToFilter}
              onChange={(e) => setAssignedToFilter(e.target.value)}
              placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö"
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">‡∏ß‡∏±‡∏ô‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥</label>
            <input
              type="number"
              value={minDaysInactive}
              onChange={(e) => setMinDaysInactive(e.target.value)}
              placeholder="90"
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö</label>
            <select
              value={`${sortBy}-${sortOrder}`}
              onChange={(e) => {
                const [field, order] = e.target.value.split('-');
                setSortBy(field);
                setSortOrder(order);
              }}
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="lastOrderDate-asc">‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢‡∏ô‡∏≤‡∏ô‡∏™‡∏∏‡∏î</option>
              <option value="lastOrderDate-desc">‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</option>
              <option value="totalSpent-desc">‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î</option>
              <option value="totalOrders-desc">‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠‡∏ö‡πà‡∏≠‡∏¢‡∏™‡∏∏‡∏î</option>
              <option value="createdAt-desc">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</option>
              <option value="name-asc">‡∏ä‡∏∑‡πà‡∏≠ A-Z</option>
            </select>
          </div>
        </div>

        <div className="flex justify-between items-center">
          <button
            onClick={resetFilters}
            className="text-gray-600 hover:text-gray-800 text-sm"
          >
            üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
          </button>
          <p className="text-sm text-gray-600">
            ‡πÅ‡∏™‡∏î‡∏á {customers.length} ‡∏à‡∏≤‡∏Å {totalCustomers.toLocaleString()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </p>
        </div>
      </div>

      {/* Customer Table */}
      <div className="bg-white rounded-lg shadow border overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <input
                    type="checkbox"
                    checked={selectedCustomers.length === customers.length && customers.length > 0}
                    onChange={toggleAllCustomers}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ‡∏¢‡∏≠‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏î‡∏¥‡∏°
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {customers.map((customer) => {
                const daysSinceOrder = getDaysSinceLastOrder(customer.lastOrderDate);
                const inactiveLevel = getInactiveLevel(daysSinceOrder);
                const isSelected = selectedCustomers.includes(customer._id);
                
                return (
                  <tr key={customer._id} className={`hover:bg-gray-50 ${isSelected ? 'bg-blue-50' : ''}`}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <input
                        type="checkbox"
                        checked={isSelected}
                        onChange={() => toggleCustomerSelection(customer._id)}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-shrink-0 w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
                          <span className="text-red-800 font-bold text-sm">üò¥</span>
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900">{customer.name}</div>
                          <div className="text-sm text-gray-500">{customer.phoneNumber}</div>
                          {customer.email && (
                            <div className="text-sm text-gray-500">{customer.email}</div>
                          )}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${inactiveLevel.color}`}>
                        {inactiveLevel.icon} {inactiveLevel.label}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {customer.totalOrders || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      ‡∏ø{(customer.totalSpent || 0).toLocaleString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        {customer.assignedTo ? (
                          <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs">
                            {customer.assignedTo}
                          </span>
                        ) : (
                          <span className="text-gray-400">‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î</span>
                        )}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        {customer.lastOrderDate ? 
                          new Date(customer.lastOrderDate).toLocaleDateString('th-TH') : '‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠'}
                      </div>
                      <div className="text-xs text-red-600">
                        {daysSinceOrder} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <button
                        onClick={() => {
                          setSelectedCustomer(customer);
                          setShowDetailModal(true);
                        }}
                        className="text-blue-600 hover:text-blue-900 mr-3"
                      >
                        ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                      </button>
                      <button
                        onClick={() => {
                          setSelectedCustomer(customer);
                          setWinBackMessage(`‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${customer.name} ‡πÄ‡∏£‡∏≤‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤! ‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© 20% üéÅ`);
                          setShowWinBackModal(true);
                        }}
                        className="text-green-600 hover:text-green-900"
                      >
                        ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö
                      </button>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>

        {/* Pagination */}
        {totalPages > 1 && (
          <div className="bg-white px-4 py-3 border-t border-gray-200 sm:px-6">
            <div className="flex justify-between items-center">
              <div className="text-sm text-gray-700">
                ‡∏´‡∏ô‡πâ‡∏≤ {currentPage} ‡∏à‡∏≤‡∏Å {totalPages}
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                  disabled={currentPage === 1}
                  className="px-3 py-1 border border-gray-300 rounded-md text-sm bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                </button>
                <button
                  onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
                  disabled={currentPage === totalPages}
                  className="px-3 py-1 border border-gray-300 rounded-md text-sm bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                </button>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Customer Detail Modal */}
      {showDetailModal && selectedCustomer && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto"
          >
            <div className="p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-bold text-gray-900">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢</h2>
                <button
                  onClick={() => setShowDetailModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  ‚úï
                </button>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡∏ä‡∏∑‡πà‡∏≠</label>
                  <p className="mt-1 text-sm text-gray-900">{selectedCustomer.name}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
                  <p className="mt-1 text-sm text-gray-900">{selectedCustomer.phoneNumber}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
                  <p className="mt-1 text-sm text-gray-900">{selectedCustomer.email || '-'}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</label>
                  <span className={`mt-1 inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getCustomerTypeColor(selectedCustomer.customerType)}`}>
                    {getCustomerTypeLabel(selectedCustomer.customerType)}
                  </span>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö</label>
                  <p className="mt-1 text-sm text-gray-900">{selectedCustomer.assignedTo || '-'}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡πÄ‡∏•‡∏Ç‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ</label>
                  <p className="mt-1 text-sm text-gray-900">{selectedCustomer.taxId || '-'}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°</label>
                  <p className="mt-1 text-sm text-gray-900">{selectedCustomer.totalOrders || 0} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡∏¢‡∏≠‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏ß‡∏°‡πÄ‡∏î‡∏¥‡∏°</label>
                  <p className="mt-1 text-sm text-gray-900">‡∏ø{(selectedCustomer.totalSpent || 0).toLocaleString()}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</label>
                  <p className="mt-1 text-sm text-gray-900">‡∏ø{Math.round(selectedCustomer.averageOrderValue || 0).toLocaleString()}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</label>
                  <p className="mt-1 text-sm text-gray-900">
                    {selectedCustomer.lastOrderDate ? 
                      new Date(selectedCustomer.lastOrderDate).toLocaleDateString('th-TH') : '‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠'}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</label>
                  <p className="mt-1 text-sm text-gray-900">
                    {new Date(selectedCustomer.createdAt).toLocaleDateString('th-TH')}
                  </p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢</label>
                  <p className="mt-1 text-sm text-red-600 font-bold">
                    {getDaysSinceLastOrder(selectedCustomer.lastOrderDate)} ‡∏ß‡∏±‡∏ô
                  </p>
                </div>
              </div>
              
              <div className="mt-6 bg-red-50 p-4 rounded-lg">
                <h3 className="text-sm font-medium text-red-800 mb-2">üò¥ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢</h3>
                <ul className="text-sm text-red-700 space-y-1">
                  <li>‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 90 ‡∏ß‡∏±‡∏ô</li>
                  <li>‚Ä¢ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©</li>
                  <li>‚Ä¢ ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏ß‡∏£</li>
                  {(selectedCustomer.totalSpent || 0) > 5000 && (
                    <li>‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á (‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5,000 ‡∏ö‡∏≤‡∏ó)</li>
                  )}
                </ul>
              </div>
            </div>
          </motion.div>
        </div>
      )}

      {/* Win-Back Message Modal */}
      {showWinBackModal && selectedCustomer && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            className="bg-white rounded-lg max-w-md w-full"
          >
            <div className="p-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-bold text-gray-900">‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö</h2>
                <button
                  onClick={() => setShowWinBackModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  ‚úï
                </button>
              </div>
              
              <div className="mb-4">
                <p className="text-sm text-gray-600">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: <span className="font-medium">{selectedCustomer.name}</span></p>
                <p className="text-sm text-gray-600">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: <span className="font-medium">{selectedCustomer.phoneNumber}</span></p>
                <p className="text-sm text-red-600">‡∏´‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏¢: <span className="font-medium">{getDaysSinceLastOrder(selectedCustomer.lastOrderDate)} ‡∏ß‡∏±‡∏ô</span></p>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö</label>
                <textarea
                  value={winBackMessage}
                  onChange={(e) => setWinBackMessage(e.target.value)}
                  rows={4}
                  placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤..."
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              
              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setShowWinBackModal(false)}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800"
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
                <button
                  onClick={handleSendWinBackMessage}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                >
                  ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                </button>
              </div>
            </div>
          </motion.div>
        </div>
      )}
    </div>
  );
};

export default InactiveCustomersPage; 