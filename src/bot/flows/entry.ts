import { callSendAPI } from '@/utils/messenger';
import { getSession, clearSession, updateSession } from '../state';
import { sendTypingOn } from '@/utils/messenger';
import connectDB from '@/lib/db';
import AdminPhone from '@/models/AdminPhone';
import { sendSMS } from '@/app/notification';
import { getAssistantResponse, buildSystemInstructions, enableAIForUser, disableAIForUser, isAIEnabled, addToConversationHistory, getConversationHistory, addToConversationHistoryWithContext } from '@/utils/openai-utils';
import MessengerUser from '@/models/MessengerUser';
import { sendTextMessage, hasCutOrImageCommands } from '@/utils/messenger-utils';

interface MessagingEvent {
  sender: { id: string };
  message?: {
    text?: string;
    quick_reply?: { payload: string };
    attachments?: { type: string; payload: any }[];
  };
  postback?: {
    title?: string;
    payload: string;
  };
  [key: string]: unknown;
}

const PAGE_ID = process.env.FB_PAGE_ID || '';

export async function handleEvent(event: MessagingEvent) {
  const psid = event.sender.id;

  // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏û‡∏à‡πÄ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏î ‡πÜ
  if (PAGE_ID && psid === PAGE_ID) {
    return;
  }

  // ‡∏Ç‡πâ‡∏≤‡∏° event ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô echo (‡∏ö‡∏≠‡∏ó‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏á) ‡∏´‡∏£‡∏∑‡∏≠ delivery/read
  if (event.message && (
    (event as any).message.is_echo || 
    (event as any).message.app_id ||
    (event as any).message.metadata?.is_echo ||
    (event as any).message.metadata?.app_id
  )) {
    console.log('[Flow] skip echo event');
    return;
  }
  if ((event as any).delivery || (event as any).read) {
    console.log('[Flow] skip delivery/read event');
    return;
  }

  console.log('[Flow] handleEvent for', psid, JSON.stringify(event));

  const session = await getSession(psid);

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback events
  if (event.postback) {
    const payload = event.postback.payload || '';
    
    if (payload === 'GET_STARTED') {
      // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      await enableAIForUser(psid);
      return callSendAPI(psid, {
        text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞'
      });
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ quick reply events
  if (event.message && event.message.quick_reply) {
    const payload = event.message.quick_reply.payload;
    
    if (payload === 'GET_STARTED') {
      // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      await enableAIForUser(psid);
      return callSendAPI(psid, {
        text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞'
      });
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  if (event.message && event.message.text) {
    const question = event.message.text.trim();
    
    if (question.length > 0) {
      console.log(`[AI Debug] Processing question: "${question}"`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
      if (question.includes('/delete')) {
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà)
        await clearSession(psid); // ‡∏•‡∏ö session/cart/temp ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        await disableAIForUser(psid); // ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà

        // ‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ MessengerUser ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏†‡∏≤‡∏û‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
        try {
          await connectDB();
          await MessengerUser.deleteOne({ psid });
        } catch (err) {
          console.error('[#delete] remove MessengerUser error', err);
        }

        await sendTypingOn(psid);
        // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡πÉ‡∏´‡∏°‡πà
        await enableAIForUser(psid);
        return callSendAPI(psid, { text: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞' });
      }

      if (question.includes('/‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡πÑ‡∏≠')) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (psid === PAGE_ID) {
          // ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏à - ‡∏õ‡∏¥‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          try {
            await connectDB();
            await MessengerUser.updateMany({}, { aiEnabled: false, updatedAt: new Date() });
            console.log('[Admin] ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
            await callSendAPI(psid, { text: '‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞' });
          } catch (error) {
            console.error('[Admin] Error ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', error);
            await callSendAPI(psid, { text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡πà‡∏∞' });
          }
          return;
        } else {
          // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ - ‡∏õ‡∏¥‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
          await disableAIForUser(psid);
          return callSendAPI(psid, { text: '‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞' });
        }
      }

      if (question.includes('/‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡πÑ‡∏≠')) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (psid === PAGE_ID) {
          // ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏à - ‡πÄ‡∏õ‡∏¥‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          try {
            await connectDB();
            await MessengerUser.updateMany({}, { aiEnabled: true, updatedAt: new Date() });
            console.log('[Admin] ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
            await callSendAPI(psid, { text: '‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞' });
          } catch (error) {
            console.error('[Admin] Error ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', error);
            await callSendAPI(psid, { text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡πà‡∏∞' });
          }
          return;
        } else {
          // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ - ‡πÄ‡∏õ‡∏¥‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
          await enableAIForUser(psid);
          return callSendAPI(psid, { text: '‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞' });
        }
      }

      if (question.includes('/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏≠‡πÑ‡∏≠')) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (psid === PAGE_ID) {
          // ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏à - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AI ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          try {
            await connectDB();
            const totalUsers = await MessengerUser.countDocuments({});
            const aiEnabledUsers = await MessengerUser.countDocuments({ aiEnabled: true });
            const aiDisabledUsers = totalUsers - aiEnabledUsers;
            
            const statusMessage = `üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AI ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:\n\n` +
              `üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalUsers} ‡∏Ñ‡∏ô\n` +
              `‚úÖ AI ‡πÄ‡∏õ‡∏¥‡∏î: ${aiEnabledUsers} ‡∏Ñ‡∏ô\n` +
              `‚ùå AI ‡∏õ‡∏¥‡∏î: ${aiDisabledUsers} ‡∏Ñ‡∏ô\n\n` +
              `‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n` +
              `/‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡πÑ‡∏≠ - ‡πÄ‡∏õ‡∏¥‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n` +
              `/‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡πÑ‡∏≠ - ‡∏õ‡∏¥‡∏î AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n` +
              `/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏≠‡πÑ‡∏≠ - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô`;
            
            await callSendAPI(psid, { text: statusMessage });
          } catch (error) {
            console.error('[Admin] Error ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AI:', error);
            await callSendAPI(psid, { text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AI ‡∏Ñ‡πà‡∏∞' });
          }
          return;
        } else {
          // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AI ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
          const aiEnabled = await isAIEnabled(psid);
          const statusText = aiEnabled ? '‚úÖ AI ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏∞' : '‚ùå AI ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏∞';
          return callSendAPI(psid, { text: statusText });
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏°‡∏î AI
    const aiEnabled = await isAIEnabled(psid);
    
    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î AI ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if (!aiEnabled) {
      console.log(`[AI Debug] Enabling AI for new user: ${psid}`);
      await enableAIForUser(psid);
    }
      
      try {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        await addToConversationHistory(psid, 'user', question);
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
          const conversationHistory = await getConversationHistory(psid);
          const systemInstructions = await buildSystemInstructions('Basic');
          const answer = await getAssistantResponse(systemInstructions, conversationHistory, question);
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° AI ‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
          await addToConversationHistory(psid, 'assistant', answer);
          
          // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö [cut] ‡πÅ‡∏•‡∏∞ [SEND_IMAGE:...] ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
          if (hasCutOrImageCommands(answer)) {
          await sendTextMessage(psid, answer);
        } else {
          await callSendAPI(psid, { text: answer });
        }
        
        return;
      } catch (error) {
        console.error(`[AI Debug] Error processing AI response:`, error);
        // ‡∏ñ‡πâ‡∏≤ AI ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        await callSendAPI(psid, {
          text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
        });
        return;
      }
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö (‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û, ‡πÑ‡∏ü‡∏•‡πå)
  if (event.message && event.message.attachments && event.message.attachments.length > 0) {
    const attachment = event.message.attachments[0];
    
    if (attachment.type === 'image') {
      // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡πÉ‡∏´‡πâ AI ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
      const aiEnabled = await isAIEnabled(psid);
      
      if (!aiEnabled) {
        await enableAIForUser(psid);
      }
      
      try {
        await addToConversationHistoryWithContext(psid, 'user', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ', JSON.stringify([
          { type: 'image_url', image_url: { url: (attachment.payload as any).url } }
        ]));
        
        const conversationHistory = await getConversationHistory(psid);
        const systemInstructions = await buildSystemInstructions('Basic');
        const answer = await getAssistantResponse(systemInstructions, conversationHistory, [
          { type: 'text', text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ' },
          { type: 'image_url', image_url: { url: (attachment.payload as any).url } }
        ]);
        
        await addToConversationHistory(psid, 'assistant', answer);
        
        if (hasCutOrImageCommands(answer)) {
          await sendTextMessage(psid, answer);
        } else {
          await callSendAPI(psid, { text: answer });
        }
        
      return;
      } catch (error) {
        console.error(`[AI Debug] Error processing image:`, error);
        await callSendAPI(psid, {
          text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
        });
    return;
      }
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô SMS ‡πÅ‡∏•‡∏∞ LINE ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"
async function notifyAdminsContact(userPsid: string) {
  try {
    await connectDB();
    
    // ‡∏™‡πà‡∏á SMS ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    const adminList = await AdminPhone.find({}, 'phoneNumber').lean();
    if (adminList && adminList.length > 0) {
      const smsMsg = `‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏î "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô" (PSID: ${userPsid}) ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏à Facebook ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏∞`;
      await Promise.allSettled(
        adminList.map((a: any) => sendSMS(a.phoneNumber, smsMsg))
      );
      console.log(`[notifyAdminsContact] ‡∏™‡πà‡∏á SMS ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${adminList.length} ‡∏Ñ‡∏ô`);
    } else {
      console.warn('[notifyAdminsContact] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
    }
    
    // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° LINE
    try {
      const { notifyAllLineGroups } = await import('@/utils/line');
      const lineMsg = `üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏î "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô" ‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡πÄ‡∏ü‡∏ã‡∏ö‡∏∏‡πä‡∏Ñ\n\nPSID: ${userPsid}\n‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏∞`;
      
      const lineResult = await notifyAllLineGroups(lineMsg);
      if (lineResult) {
        console.log(`[notifyAdminsContact] ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${lineResult.successful} ‡∏Å‡∏•‡∏∏‡πà‡∏°, ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ${lineResult.failed} ‡∏Å‡∏•‡∏∏‡πà‡∏°`);
      }
    } catch (lineError) {
      console.error('[notifyAdminsContact] ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', lineError);
    }
    
  } catch (err) {
    console.error('[notifyAdminsContact] error', err);
  }
}