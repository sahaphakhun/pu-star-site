import { callSendAPIAsync } from '@/utils/messenger';
import Product, { IProduct } from '@/models/Product';
import { addToCart, updateSession, getSession } from '../state';
import { getProductById } from '@/utils/productCache';
import { getCache, setCache } from '@cache/simpleCache';
import { sendTypingAndMessages, sendTypingOn } from '@/utils/messenger';
import { transformImage } from '@utils/image';
import connectDB from '@/lib/mongodb';
import { computeShippingFee } from '@/utils/shipping';

function slug(text: string): string {
  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô lower-case + trim ‡πÅ‡∏•‡πâ‡∏ß encodeURIComponent ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡πÑ‡∏ó‡∏¢/‡∏û‡∏¥‡πÄ‡∏®‡∏©
  return encodeURIComponent(text.toLowerCase().trim().replace(/\s+/g, '-'));
}

// ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å cache/DB
async function getAllProducts(): Promise<IProduct[]> {
  let products = getCache<IProduct[]>('products');
  if (!products) {
    await connectDB();
    products = (await Product.find().sort({ createdAt: -1 }).lean()) as unknown as IProduct[];
    setCache('products', products, 86_400_000); // cache 1 ‡∏ß‡∏±‡∏ô
  }
  return products;
}

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
export async function sendWelcome(psid: string) {
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å 3 ‡∏Ç‡πâ‡∏≠
  sendTypingAndMessages(psid, {
    text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ Next Star Bot ü§ñ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞',
    quick_replies: [
      { content_type: 'text', title: '‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', payload: 'Q_INQUIRY' },
      { content_type: 'text', title: '‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', payload: 'Q_ORDER' },
      { content_type: 'text', title: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô', payload: 'Q_CONTACT_ADMIN' },
    ],
  });
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö carousel
export async function showCategories(psid: string) {
  const products = await getAllProducts();
  const map = new Map<string, IProduct>();
  for (const p of products) {
    const cat = p.category || '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ';
    if (!map.has(cat)) map.set(cat, p); // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏π‡∏õ
  }
  const categories = Array.from(map.keys());

  if (categories.length === 0) {
    return callSendAPIAsync(psid, { text: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏∞' });
  }

  const elements = categories.map((cat) => {
    const sampleProduct = map.get(cat)!;
    return {
      title: cat,
      subtitle: '‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ',
      image_url: transformImage(sampleProduct.imageUrl),
      buttons: [
        {
          type: 'postback',
          title: `‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${cat.length > 13 ? cat.slice(0, 13) + '‚Ä¶' : cat}`,
          payload: `CATEGORY_${slug(cat)}`,
        },
      ],
    };
  });

  callSendAPIAsync(psid, {
    attachment: {
      type: 'template',
      payload: {
        template_type: 'generic',
        image_aspect_ratio: 'square',
        elements,
      },
    },
  });

  await updateSession(psid, { step: 'browse_category' });
}

// ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö carousel (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î)
export async function showProducts(psid: string, categorySlug?: string) {
  // ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
  await sendTypingOn(psid);

  const products = await getAllProducts();

  let filtered = products;
  if (categorySlug) {
    const decoded = decodeURIComponent(categorySlug);
    filtered = products.filter((p) => slug(p.category || '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ') === slug(decoded));
  }

  if (filtered.length === 0) {
    callSendAPIAsync(psid, { text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞' });
    return;
  }

  const elements = filtered.slice(0, 10).map((p: IProduct) => {
    let subtitle = `${(p.price || (p.units && p.units[0]?.price) || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (p.units && p.units.length > 0) {
      if (p.units.length === 1) {
        subtitle += ` / ${p.units[0].label}`;
      } else {
        subtitle += ` (${p.units.length} ‡∏´‡∏ô‡πà‡∏ß‡∏¢)`;
      }
    }
    
    return {
      title: p.name,
      subtitle,
      image_url: transformImage(p.imageUrl),
      buttons: [
        {
          type: 'postback',
          title: '‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ üõí',
          payload: `ORDER_${p._id}`,
        },
        {
          type: 'web_url',
          title: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
          url: `${(process.env.NEXT_PUBLIC_SITE_URL || 'https://pu-star-site-production.up.railway.app').replace(/\/$/, '')}/products/${p._id}`,
          webview_height_ratio: 'tall',
        },
        {
          type: 'postback',
          title: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô',
          payload: 'CONTACT_ADMIN',
        },
      ],
    };
  });

  callSendAPIAsync(psid, {
    attachment: {
      type: 'template',
      payload: {
        template_type: 'generic',
        image_aspect_ratio: 'square',
        elements,
      },
    },
  });

  await updateSession(psid, { step: 'browse_product' });
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback CATEGORY_<slug>
export async function handleCategoryPostback(psid: string, payload: string) {
  const slug = payload.replace('CATEGORY_', '');
  return showProducts(psid, slug);
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback ORDER_<id>
export async function handleOrderPostback(psid: string, payload: string) {
  const productId = payload.replace('ORDER_', '');
  const product = await getProductById(productId);
  if (!product) {
    callSendAPIAsync(psid, { text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö' });
    return;
  }
  const idStr = (product._id as any).toString();

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡πà‡∏≠‡∏ô
  if (product.units && product.units.length > 0) {
    await updateSession(psid, {
      step: 'select_unit',
      tempData: {
        product: {
          id: idStr,
          name: product.name,
          price: product.price, // default
          options: product.options ?? [],
          units: product.units,
        },
      },
    });
    return askUnit(psid);
  }

  // ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πà‡∏≠
  if (product.options && product.options.length > 0) {
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    await updateSession(psid, {
      step: 'select_option',
      tempData: {
        product: {
          id: idStr,
          name: product.name,
          price: product.price,
          options: product.options,
        },
        selections: {},
        optIdx: 0,
      },
    });
    return askNextOption(psid);
  }

  // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏à‡∏∂‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á ‡πÜ
  await addToCart(psid, {
    productId: idStr,
    name: product.name,
    price: product.price || (product.units && product.units[0]?.price) || 0,
    quantity: 1,
    selectedOptions: {},
    unitLabel: product.units && product.units[0]?.label,
    unitPrice: product.units && product.units[0]?.price,
  });

  const session = await getSession(psid);
  const total = session.cart.reduce((sum, i) => sum + i.price * i.quantity, 0);
  
  let unitText = '';
  if (product.units && product.units[0]?.label) {
    unitText = ` (${product.units[0].label})`;
  }
  
  callSendAPIAsync(psid, {
    text: `‡πÄ‡∏û‡∏¥‡πà‡∏° ${product.name}${unitText} ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß üéâ\n‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ${total.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
    quick_replies: [
      { content_type: 'text', title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', payload: 'CONFIRM_CART' },
      { content_type: 'text', title: '‡∏î‡∏π‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤', payload: 'SHOW_CART' },
      { content_type: 'text', title: '‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°', payload: 'SHOW_PRODUCTS' },
    ],
  });

  await updateSession(psid, { step: 'summary' });
}

// ‡∏ñ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
export async function askNextOption(psid: string): Promise<void> {
  const sess = await getSession(psid);
  const temp: any = sess.tempData;
  const product = temp.product;
  const idx: number = temp.optIdx || 0;
  const option = product.options[idx];
  if (!option) return; // safety

  await sendTypingOn(psid);
  return callSendAPIAsync(psid, {
    text: `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ${option.name}`,
    quick_replies: option.values.slice(0, 11).map((v: any) => ({
      content_type: 'text',
      title: v.label.substring(0, 20),
      payload: `OPT_${idx}_${encodeURIComponent(v.label)}`,
    })),
  });
}

// ‡∏ñ‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
export async function askQuantity(psid: string): Promise<void> {
  const sess = await getSession(psid);
  const unitLabel = (sess.tempData as any)?.selectedUnit?.label || '';

  await sendTypingOn(psid);
  await updateSession(psid, { step: 'ask_quantity' });

  const prompt = unitLabel
    ? `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏µ‡πà${unitLabel}‡∏Ñ‡∏∞? ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô 3`
    : '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏µ‡πà‡∏ä‡∏¥‡πâ‡∏ô‡∏Ñ‡∏∞? ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô 3';

  return callSendAPIAsync(psid, {
    text: prompt,
    quick_replies: [1, 2, 3, 4, 5].map((n) => ({
      content_type: 'text',
      title: `${n}`,
      payload: `QTY_${n}`,
    })),
  });
}

// ‡∏ñ‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢
export async function askUnit(psid: string): Promise<void> {
  const sess = await getSession(psid);
  const temp: any = sess.tempData;
  const product = temp.product;
  if (!product || !product.units) return;

  await sendTypingOn(psid);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î "‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á+... ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏•‡∏µ‡∏Å"
  const unitWithShipping = product.units.find((u: any) => typeof u.shippingFee === 'number' && u.shippingFee > 0);
  const shippingLine = unitWithShipping ? `‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á+${unitWithShipping.shippingFee ?? 50} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏•‡∏µ‡∏Å` : '';

  return callSendAPIAsync(psid, {
    text: `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${product.name}${shippingLine ? '\n' + shippingLine : ''}`,
    quick_replies: product.units.slice(0, 11).map((u: any, idx: number) => {
      let fee: string;
      if (typeof u.shippingFee === 'number') {
        fee = u.shippingFee === 0 ? '‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ' : `‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á ${u.shippingFee}`;
      } else {
        fee = '‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á';
      }
      const titleRaw = `${u.label} (${u.price.toLocaleString()}‡∏ø / ${fee})`;
      return {
        content_type: 'text',
        title: titleRaw.substring(0, 20),
        payload: `UNIT_${idx}`,
      };
    }),
  });

  await updateSession(psid, { step: 'select_unit' });
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback UNIT_<idx>
export async function handleUnitPostback(psid: string, payload: string) {
  const idxStr = payload.replace('UNIT_', '');
  const idx = parseInt(idxStr, 10);
  if (isNaN(idx)) return;

  const sess = await getSession(psid);
  const temp: any = sess.tempData || {};
  const product = temp.product;
  if (!product || !product.units || !product.units[idx]) return;

  const selectedUnit = product.units[idx];

  await updateSession(psid, {
    tempData: { ...temp, selectedUnit },
  });

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πà‡∏≠
  if (product.options && product.options.length > 0) {
    await updateSession(psid, { step: 'select_option', tempData: { ...temp, selectedUnit, selections: {}, optIdx: 0 } });
    return askNextOption(psid);
  }

  // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡∏ñ‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡∏¢
  return askQuantity(psid);
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
export async function addProductWithOptions(psid: string, quantity: number) {
  const sess = await getSession(psid);
  const temp: any = sess.tempData;
  const product = temp.product;
  const selections = temp.selections || {};
  const selectedUnit = temp.selectedUnit as { label?: string; price?: number } | undefined;

  await addToCart(psid, {
    productId: product.id,
    name: product.name,
    price: selectedUnit?.price ?? product.price,
    quantity,
    selectedOptions: selections,
    unitLabel: selectedUnit?.label,
    unitPrice: selectedUnit?.price,
  });

  const updated = await getSession(psid);
  const total = updated.cart.reduce((sum, i) => sum + i.price * i.quantity, 0);
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ
  const shippingFee = await computeShippingFee(updated.cart);
  const grand = total + shippingFee;
  
  let unitText = '';
  if (selectedUnit?.label) {
    unitText = ` (${selectedUnit.label})`;
  }
  
  callSendAPIAsync(psid, {
    text: `‡πÄ‡∏û‡∏¥‡πà‡∏° ${product.name}${unitText} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${quantity} ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß üéâ\n‡∏¢‡∏≠‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${total.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á ${shippingFee.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ${grand.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
    quick_replies: [
      { content_type: 'text', title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', payload: 'CONFIRM_CART' },
      { content_type: 'text', title: '‡∏î‡∏π‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤', payload: 'SHOW_CART' },
      { content_type: 'text', title: '‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°', payload: 'SHOW_PRODUCTS' },
    ],
  });

  await updateSession(psid, { step: 'summary', tempData: {} });
}

// Pre-warm product cache ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á cold-start
getAllProducts().catch(() => {});

// computeShippingFee ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å util ‡πÅ‡∏•‡πâ‡∏ß
