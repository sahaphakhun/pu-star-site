import { callSendAPI } from '@/utils/messenger';
import Product, { IProduct } from '@/models/Product';
import { addToCart, updateSession, getSession } from '../state';
import connectDB from '@/lib/mongodb';
import { getCache, setCache } from '@cache/simpleCache';
import { sendTypingOn } from '@/utils/messenger';
import { transformImage } from '@utils/image';

// ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö carousel
export async function showProducts(psid: string) {
  // ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
  await sendTypingOn(psid);

  let products = getCache<IProduct[]>('products');
  if (!products) {
    await connectDB();
    products = (await Product.find().sort({ createdAt: -1 }).limit(10).lean()) as unknown as IProduct[];
    setCache('products', products, 60_000); // cache 60s
  }

  console.log('[ProductFlow] products length', products.length);

  if (products.length === 0) {
    await callSendAPI(psid, { text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á' });
    return;
  }

  const elements = products.map((p: IProduct) => ({
    title: p.name,
    subtitle: `${p.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
    image_url: transformImage(p.imageUrl),
    buttons: [
      {
        type: 'postback',
        title: '‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ üõí',
        payload: `ORDER_${p._id}`,
      },
      {
        type: 'web_url',
        title: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
        url: `${(process.env.NEXT_PUBLIC_SITE_URL || 'https://www.nextstarinnovations.com').replace(/\/$/, '')}/product/${p._id}`,
        webview_height_ratio: 'tall',
      },
      {
        type: 'postback',
        title: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô',
        payload: 'CONTACT_ADMIN',
      },
    ],
  }));

  await callSendAPI(psid, {
    attachment: {
      type: 'template',
      payload: {
        template_type: 'generic',
        image_aspect_ratio: 'square',
        elements,
      },
    },
  });

  updateSession(psid, { step: 'browse' });
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback ORDER_<id>
export async function handleOrderPostback(psid: string, payload: string) {
  const productId = payload.replace('ORDER_', '');
  await connectDB();
  const product = await Product.findById(productId).lean<IProduct | null>();
  if (!product) {
    await callSendAPI(psid, { text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö' });
    return;
  }
  const idStr = (product._id as any).toString();

  addToCart(psid, {
    productId: idStr,
    name: product.name,
    price: product.price,
    quantity: 1,
  });

  const session = getSession(psid);
  const total = session.cart.reduce((sum, i) => sum + i.price * i.quantity, 0);

  await callSendAPI(psid, {
    text: `‡πÄ‡∏û‡∏¥‡πà‡∏° ${product.name} ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß üéâ\n‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: ${total.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
    quick_replies: [
      { content_type: 'text', title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', payload: 'CONFIRM_CART' },
      { content_type: 'text', title: '‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°', payload: 'SHOW_PRODUCTS' },
    ],
  });

  updateSession(psid, { step: 'summary' });
} 