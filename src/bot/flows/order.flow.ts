import { callSendAPIAsync, sendTypingOn } from '@/utils/messenger';
import { getSession, updateSession } from '../state';
import MessengerUser from '@/models/MessengerUser';
import connectDB from '@/lib/mongodb';

interface ShippingInfo {
  name: string;
  address: string;
}

export async function startCheckout(psid: string) {
  const session = getSession(psid);
  if (session.cart.length === 0) {
    callSendAPIAsync(psid, { text: '‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏∞' });
    return;
  }
  await sendTypingOn(psid);
  callSendAPIAsync(psid, { text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' });
  updateSession(psid, { step: 'ask_name', tempData: {} });
}

export async function handleName(psid: string, name: string) {
  const sess = getSession(psid);
  updateSession(psid, { step: 'ask_address', tempData: { ...(sess.tempData || {}), name } });
  callSendAPIAsync(psid, { text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏∞' });
}

export async function handleAddress(psid: string, address: string) {
  const session = getSession(psid);
  const name = (session.tempData as any)?.name || '';
  const shipping: ShippingInfo = { name, address };

  await sendTypingOn(psid);

  // ‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
  const itemsText = session.cart.map((c) => `‚Ä¢ ${c.name} x${c.quantity}`).join('\n');
  const total = session.cart.reduce((s, i) => s + i.price * i.quantity, 0);

  callSendAPIAsync(psid, {
    text: `‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠\n${itemsText}\n‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ${total.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡∏ä‡∏∑‡πà‡∏≠: ${name}\n‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${address}`,
    quick_replies: [
      { content_type: 'text', title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‚úîÔ∏è', payload: 'ORDER_CONFIRM' },
      { content_type: 'text', title: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', payload: 'ORDER_CANCEL' },
    ],
  });

  updateSession(psid, { step: 'confirm_order', tempData: { ...shipping } });
}

export async function finalizeOrder(psid: string) {
  await connectDB();
  const session = getSession(psid);
  const shipping = session.tempData as unknown as ShippingInfo;
  const total = session.cart.reduce((s, i) => s + i.price * i.quantity, 0);
  const items = session.cart.map((c) => ({
    productId: c.productId,
    name: c.name,
    price: c.price,
    quantity: c.quantity,
  }));

  // ‡∏´‡∏≤ userId & phone ‡∏à‡∏≤‡∏Å MessengerUser
  const mu = await MessengerUser.findOne({ psid });
  const payload: any = {
    customerName: shipping.name,
    customerPhone: mu?.phoneNumber || '000',
    customerAddress: shipping.address,
    items,
    shippingFee: 0,
    discount: 0,
    totalAmount: total,
  };
  if (mu?.userId) payload.userId = mu.userId;

  try {
    await fetch(`${process.env.NEXT_PUBLIC_SITE_URL || ''}/api/orders`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });
    callSendAPIAsync(psid, { text: '‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ üéâ' });
  } catch (err) {
    callSendAPIAsync(psid, { text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà' });
  }

  // clear cart & reset step
  updateSession(psid, { cart: [], step: 'browse', tempData: {} });
} 