import { callSendAPIAsync, sendTypingOn } from '@/utils/messenger';
import { getSession, updateSession } from '../state';
import { startAuth } from './auth.flow';
import MessengerUser from '@/models/MessengerUser';
import connectDB from '@/lib/mongodb';
import { parseNameAddress } from '@/utils/nameAddressAI';
import ShippingSetting from '@/models/ShippingSetting';
import { getProductById } from '@/utils/productCache';

interface ShippingInfo {
  name: string;
  address: string;
}

export async function startCheckout(psid: string) {
  const session = await getSession(psid);
  if (session.cart.length === 0) {
    callSendAPIAsync(psid, { text: '‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏∞' });
    return;
  }
  // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  await startAuth(psid);
}

export async function handleName(psid: string, name: string) {
  // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏ß‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (OTP)
  const sess = await getSession(psid);
  await updateSession(psid, { tempData: { ...(sess.tempData || {}), name } });

  // ‡πÉ‡∏ä‡πâ flow ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏•‡∏∞ OTP
  return startAuth(psid);
}

// ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà)
export async function handleNameAddress(psid: string, fullText: string) {
  // ‡πÉ‡∏ä‡πâ OpenAI ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
  const parsed = await parseNameAddress(fullText);

  if (!parsed) {
    return callSendAPIAsync(psid, {
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô:\n‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ \n123/45 ‡∏´‡∏°‡∏π‡πà 5 ‡∏ï.‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å ...',
    });
  }

  return handleAddress(psid, parsed.address, parsed.name);
}

// ‡∏õ‡∏£‡∏±‡∏ö handleAddress ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ optional (‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏≤‡∏à‡∏≤‡∏Å handleNameAddress)
export async function handleAddress(psid: string, address: string, nameOverride?: string) {
  const session = await getSession(psid);
  const name = nameOverride || (session.tempData as any)?.name || '';
  const shipping: ShippingInfo = { name, address };

  await sendTypingOn(psid);

  // ‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢
  const itemsText = session.cart.map((c) => {
    let itemText = `‚Ä¢ ${c.name} x${c.quantity}`;
    if (c.unitLabel) {
      itemText += ` (${c.unitLabel})`;
    }
    if (c.selectedOptions && Object.keys(c.selectedOptions).length > 0) {
      const optionsText = Object.entries(c.selectedOptions).map(([k, v]) => `${k}: ${v}`).join(', ');
      itemText += ` [${optionsText}]`;
    }
    return itemText;
  }).join('\n');
  const total = session.cart.reduce((s, i) => s + i.price * i.quantity, 0);
  const shippingFee = await computeShippingFee(session.cart);
  const grand = total + shippingFee;

  callSendAPIAsync(psid, {
    text: `‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠\n${itemsText}\n‡∏¢‡∏≠‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${total.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á ${shippingFee.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${grand.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡∏ä‡∏∑‡πà‡∏≠: ${name}\n‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${address}`,
    quick_replies: [
      { content_type: 'text', title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‚úîÔ∏è', payload: 'ORDER_CONFIRM' },
      { content_type: 'text', title: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', payload: 'ORDER_CANCEL' },
    ],
  });

  await updateSession(psid, { step: 'ask_payment', tempData: { ...shipping } });
}

export async function finalizeOrder(psid: string) {
  console.log('[FinalizeOrder] start for', psid);
  await connectDB();
  const session = await getSession(psid);
  console.log('[FinalizeOrder] session', JSON.stringify(session));
  const shipping = session.tempData as any as ShippingInfo & { paymentMethod?: string; slipUrl?: string };
  const total = session.cart.reduce((s, i) => s + i.price * i.quantity, 0);
  const shippingFee = await computeShippingFee(session.cart);
  const grandTotal = total + shippingFee;

  const items = session.cart.map((c) => ({
    productId: c.productId,
    name: c.name,
    price: c.price,
    quantity: c.quantity,
    selectedOptions: c.selectedOptions || {},
    unitLabel: c.unitLabel,
    unitPrice: c.unitPrice,
  }));

  // Log ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î payload ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  console.log('[FinalizeOrder] built items', JSON.stringify(items));

  // ‡∏´‡∏≤ userId & phone ‡∏à‡∏≤‡∏Å MessengerUser
  const mu = await MessengerUser.findOne({ psid });
  const payload: any = {
    customerName: shipping.name,
    customerPhone: mu?.phoneNumber || '000',
    customerAddress: shipping.address,
    items,
    shippingFee,
    discount: 0,
    totalAmount: grandTotal,
  };
  if (mu?.userId) payload.userId = mu.userId;
  if (shipping.paymentMethod) payload.paymentMethod = shipping.paymentMethod;
  if (shipping.slipUrl) payload.slipUrl = shipping.slipUrl;

  console.log('[FinalizeOrder] payload', JSON.stringify(payload));

  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á absolute URL ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Node fetch ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö relative path)
    const originEnv = process.env.SITE_URL || process.env.NEXT_PUBLIC_SITE_URL || process.env.VERCEL_URL || '';
    const origin = originEnv.startsWith('http') ? originEnv : `https://${originEnv.replace(/^https?:\/\//, '')}`;
    const res = await fetch(`${origin.replace(/\/$/, '')}/api/orders`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });

    if (!res.ok) {
      const text = await res.text();
      console.error('[FinalizeOrder] API error', res.status, text);
      throw new Error(`API ${res.status}`);
    }

    callSendAPIAsync(psid, { text: '‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ üéâ' });
  } catch (err) {
    console.error('[FinalizeOrder] fetch error', err);
    callSendAPIAsync(psid, { text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà' });
  }

  // clear cart & reset step
  await updateSession(psid, { cart: [], step: 'browse', tempData: {} });
}

export async function askPayment(psid: string) {
  callSendAPIAsync(psid, {
    text: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏∞',
    quick_replies: [
      { content_type: 'text', title: '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', payload: 'PAY_TRANSFER' },
      { content_type: 'text', title: '‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á', payload: 'PAY_COD' },
    ],
  });
  await updateSession(psid, { step: 'await_payment_method' });
}

export async function sendBankInfo(psid: string) {
  callSendAPIAsync(psid, { text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î\n‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢\n‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ 123-4-56789-0\n‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ NEXT STAR INNOVATIONS' });
  callSendAPIAsync(psid, { 
    text: '‡πÇ‡∏≠‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞',
    quick_replies: [
      { content_type:'text', title:'‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô', payload:'CHANGE_PAYMENT' },
      { content_type:'text', title:'‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', payload:'ORDER_CANCEL' }
    ]
  });
  await updateSession(psid, { step: 'await_slip' });
}

// ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô COD ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ
export async function confirmCOD(psid:string){
  const session = await getSession(psid);
  const total = session.cart.reduce((s,i)=>s+i.price*i.quantity,0);
  const shippingFee = await computeShippingFee(session.cart);
  const grand = total + shippingFee;
  callSendAPIAsync(psid, {
    text:`‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á)\n‡∏¢‡∏≠‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${total.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á ${shippingFee.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${grand.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
    quick_replies:[
      { content_type:'text', title:'‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‚úîÔ∏è', payload:'COD_CONFIRM' },
      { content_type:'text', title:'‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô', payload:'CHANGE_PAYMENT' },
      { content_type:'text', title:'‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', payload:'ORDER_CANCEL' }
    ]
  });
  await updateSession(psid, { step:'await_cod_confirm' });
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏£‡∏∏‡∏õ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
export async function showCart(psid: string) {
  const session = await getSession(psid);
  if (session.cart.length === 0) {
    return callSendAPIAsync(psid, { text: '‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏∞' });
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
  const itemsText = session.cart
    .map((c, idx) => {
      let t = `${idx + 1}) ${c.name} x${c.quantity}`;
      if (c.unitLabel) t += ` (${c.unitLabel})`;
      return t;
    })
    .join('\n');

  const total = session.cart.reduce((s, i) => s + i.price * i.quantity, 0);
  const shippingFee = await computeShippingFee(session.cart);
  const grand = total + shippingFee;

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° quick replies: ‡∏•‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 8), ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô, ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  const removeReplies = session.cart.slice(0, 8).map((_, idx) => ({
    content_type: 'text',
    title: `‡∏•‡∏ö ${idx + 1}`,
    payload: `REMOVE_${idx}`,
  }));

  callSendAPIAsync(psid, {
    text: `‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n${itemsText}\n‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${total.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á: ${shippingFee.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${grand.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
    quick_replies: [
      { content_type: 'text', title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠', payload: 'CONFIRM_CART' },
      ...removeReplies,
      { content_type: 'text', title: '‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤', payload: 'CLEAR_CART' },
    ],
  });

  await updateSession(psid, { step: 'summary' });
}

// Helper: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢ + maxFee
async function computeShippingFee(cart: any[]): Promise<number> {
  if (cart.length === 0) return 0;
  await connectDB();
  const setting = (await ShippingSetting.findOne().lean()) as any || { maxFee:50 };
  const maxFee:number = setting.maxFee ?? 50;

  const unitFees: number[] = [];
  for (const c of cart) {
    if (!c.unitLabel) continue;
    const prod = await getProductById(c.productId);
    if (prod?.units) {
      const u = prod.units.find((un:any)=>un.label===c.unitLabel);
      if (u && typeof u.shippingFee==='number') unitFees.push(u.shippingFee);
    }
  }
  const fee = unitFees.length ? Math.max(...unitFees) : 0;
  return Math.min(maxFee, fee);
} 