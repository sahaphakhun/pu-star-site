// =============================
// Cache Manager ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google
// =============================

import { 
  getCacheStatus, 
  setupCacheMonitoring, 
  refreshCacheIfNeeded,
  refreshGoogleDataCache 
} from './openai-utils';

/**
 * ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google
 */
export class GoogleCacheManager {
  private static instance: GoogleCacheManager;
  private isMonitoring = false;

  private constructor() {}

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (Singleton)
   */
  public static getInstance(): GoogleCacheManager {
    if (!GoogleCacheManager.instance) {
      GoogleCacheManager.instance = new GoogleCacheManager();
    }
    return GoogleCacheManager.instance;
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
   */
  public startMonitoring(): void {
    if (this.isMonitoring) {
      console.log("[Cache Manager] Monitoring already started");
      return;
    }

    console.log("[Cache Manager] Starting cache monitoring...");
    setupCacheMonitoring();
    this.isMonitoring = true;
    console.log("[Cache Manager] Cache monitoring started successfully");
  }

  /**
   * ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡∏ä
   */
  public stopMonitoring(): void {
    if (!this.isMonitoring) {
      console.log("[Cache Manager] Monitoring not started");
      return;
    }

    console.log("[Cache Manager] Stopping cache monitoring...");
    // Note: ‡πÉ‡∏ô Node.js ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î setInterval ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    // ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    this.isMonitoring = false;
    console.log("[Cache Manager] Cache monitoring stopped");
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
   */
  public async forceRefresh(): Promise<void> {
    console.log("[Cache Manager] Force refreshing cache...");
    try {
      await refreshGoogleDataCache();
      console.log("[Cache Manager] Cache refreshed successfully");
    } catch (error) {
      console.error("[Cache Manager] Failed to refresh cache:", error);
      throw error;
    }
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏Ñ‡∏ä‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   */
  public async refreshIfNeeded(): Promise<void> {
    try {
      await refreshCacheIfNeeded();
    } catch (error) {
      console.error("[Cache Manager] Failed to refresh cache if needed:", error);
    }
  }

  /**
   * ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏Ñ‡∏ä
   */
  public getStatus() {
    return getCacheStatus();
  }

  /**
   * ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏Ñ‡∏ä‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
   */
  public getDetailedStatus() {
    const status = getCacheStatus();
    const now = new Date();
    
    return {
      ...status,
      currentTime: now.toLocaleString('th-TH'),
      monitoringActive: this.isMonitoring,
      cacheAge: {
        googleDoc: status.googleDoc.lastFetch 
          ? Math.floor((now.getTime() - status.googleDoc.lastFetch.getTime()) / 1000 / 60) + ' ‡∏ô‡∏≤‡∏ó‡∏µ'
          : '‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        sheets: status.sheets.lastFetch
          ? Math.floor((now.getTime() - status.sheets.lastFetch.getTime()) / 1000 / 60) + ' ‡∏ô‡∏≤‡∏ó‡∏µ'
          : '‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
      }
    };
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏Ñ‡∏ä
   */
  public getHealthStatus(): {
    status: 'healthy' | 'warning' | 'error';
    message: string;
    details: string[];
  } {
    const status = getCacheStatus();
    const now = new Date();
    const details: string[] = [];
    let hasWarning = false;
    let hasError = false;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Docs
    if (!status.googleDoc.hasData) {
      details.push('‚ùå Google Docs: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      hasError = true;
    } else if (status.googleDoc.lastFetch) {
      const ageMinutes = Math.floor((now.getTime() - status.googleDoc.lastFetch.getTime()) / 1000 / 60);
      if (ageMinutes > 120) { // ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        details.push(`‚ö†Ô∏è Google Docs: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ${ageMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
        hasWarning = true;
      } else {
        details.push(`‚úÖ Google Docs: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ${ageMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Sheets
    if (!status.sheets.hasData) {
      details.push('‚ùå Google Sheets: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      hasError = true;
    } else if (status.sheets.lastFetch) {
      const ageMinutes = Math.floor((now.getTime() - status.sheets.lastFetch.getTime()) / 1000 / 60);
      if (ageMinutes > 120) { // ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        details.push(`‚ö†Ô∏è Google Sheets: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ${ageMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
        hasWarning = true;
      } else {
        details.push(`‚úÖ Google Sheets: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ${ageMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (status.sheets.itemCount === 0) {
      details.push('‚ö†Ô∏è Google Sheets: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï');
      hasWarning = true;
    } else {
      details.push(`‚úÖ Google Sheets: ${status.sheets.itemCount} ‡∏ä‡∏µ‡∏ï`);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    details.push(`üïê ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ${status.nextRefreshTime}`);

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    let statusType: 'healthy' | 'warning' | 'error' = 'healthy';
    let message = '‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥';

    if (hasError) {
      statusType = 'error';
      message = '‡πÅ‡∏Ñ‡∏ä‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤';
    } else if (hasWarning) {
      statusType = 'warning';
      message = '‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á';
    }

    return {
      status: statusType,
      message,
      details
    };
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 */

/**
 * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 */
export function startCacheMonitoring(): void {
  GoogleCacheManager.getInstance().startMonitoring();
}

/**
 * ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡∏ä
 */
export function stopCacheMonitoring(): void {
  GoogleCacheManager.getInstance().stopMonitoring();
}

/**
 * ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
 */
export async function forceRefreshCache(): Promise<void> {
  return GoogleCacheManager.getInstance().forceRefresh();
}

/**
 * ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏Ñ‡∏ä
 */
export function getCacheStatusInfo() {
  return GoogleCacheManager.getInstance().getStatus();
}

/**
 * ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏Ñ‡∏ä‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 */
export function getDetailedCacheStatus() {
  return GoogleCacheManager.getInstance().getDetailedStatus();
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏Ñ‡∏ä
 */
export function getCacheHealth() {
  return GoogleCacheManager.getInstance().getHealthStatus();
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏Ñ‡∏ä‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export function shouldRefreshCacheNow(): boolean {
  const status = getCacheStatus();
  const now = new Date();
  const currentHour = now.getHours();
  const currentMinute = now.getMinutes();
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà 44 ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ô‡∏µ‡πâ
  return currentMinute === 44 && status.googleDoc.lastRefreshHour !== currentHour;
}

// Export instance ‡∏´‡∏•‡∏±‡∏Å
export const cacheManager = GoogleCacheManager.getInstance();
