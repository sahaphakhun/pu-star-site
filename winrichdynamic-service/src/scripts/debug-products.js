/**
 * Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 * ‡∏£‡∏±‡∏ô script ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 */

const { MongoClient } = require('mongodb');

// Configuration
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/winrichdynamic';
const DB_NAME = process.env.DB_NAME || 'winrichdynamic';

async function debugProducts() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    console.log('üîå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    console.log('MongoDB URI:', MONGODB_URI);
    
    await client.connect();
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    
    const db = client.db(DB_NAME);
    console.log('üìä ‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', DB_NAME);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö collections ‡∏ó‡∏µ‡πà‡∏°‡∏µ
    const collections = await db.listCollections().toArray();
    console.log('üìÅ Collections ‡∏ó‡∏µ‡πà‡∏°‡∏µ:', collections.map(c => c.name));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö products collection
    const productsCollection = db.collection('products');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô products ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalProducts = await productsCollection.countDocuments();
    console.log('üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô products ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:', totalProducts);
    
    if (totalProducts === 0) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ products ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ collection ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const collectionExists = await db.listCollections({ name: 'products' }).hasNext();
      if (!collectionExists) {
        console.log('‚ùå Collection "products" ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà');
        console.log('üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á collection "products"...');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á collection ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ insert document ‡πÄ‡∏õ‡∏•‡πà‡∏≤
        await productsCollection.insertOne({ _id: 'temp', temp: true });
        await productsCollection.deleteOne({ _id: 'temp' });
        console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á collection "products" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
      
      return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö products ‡∏ó‡∏µ‡πà‡∏°‡∏µ
    const products = await productsCollection.find({}).limit(5).toArray();
    console.log('üìù Products ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å):');
    products.forEach((product, index) => {
      console.log(`  ${index + 1}. ID: ${product._id}`);
      console.log(`     Name: ${product.name}`);
      console.log(`     SKU: ${product.sku || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
      console.log(`     Category: ${product.category}`);
      console.log(`     Created: ${product.createdAt}`);
      console.log('');
    });
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö indexes
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö indexes...');
    const indexes = await productsCollection.indexes();
    console.log('Indexes:', indexes);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö products ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ SKU
    const productsWithoutSku = await productsCollection.countDocuments({
      $or: [
        { sku: { $exists: false } },
        { sku: null },
        { sku: '' }
      ]
    });
    console.log('‚ö†Ô∏è Products ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ SKU:', productsWithoutSku);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö products ‡∏ó‡∏µ‡πà‡∏°‡∏µ SKU ‡∏ã‡πâ‡∏≥
    const duplicateSkus = await productsCollection.aggregate([
      {
        $group: {
          _id: '$sku',
          count: { $sum: 1 },
          products: { $push: '$_id' }
        }
      },
      {
        $match: {
          count: { $gt: 1 }
        }
      }
    ]).toArray();
    
    if (duplicateSkus.length > 0) {
      console.log('üö® ‡∏û‡∏ö SKU ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥:', duplicateSkus.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      duplicateSkus.forEach(duplicate => {
        console.log(`  SKU: ${duplicate._id} ‡∏°‡∏µ ${duplicate.count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      });
    } else {
      console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ SKU ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥');
    }
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ products
    console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ products...');
    const testQuery = await productsCollection.find({}).limit(1).toArray();
    console.log('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', testQuery.length > 0 ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    
    if (testQuery.length > 0) {
      console.log('‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á product:', {
        _id: testQuery[0]._id,
        name: testQuery[0].name,
        sku: testQuery[0].sku,
        category: testQuery[0].category
      });
    }
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ MongoDB server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà');
    }
    
    if (error.message.includes('authentication failed')) {
      console.log('üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username/password ‡πÉ‡∏ô MongoDB URI');
    }
    
    if (error.message.includes('ENOTFOUND')) {
      console.log('üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö hostname ‡πÉ‡∏ô MongoDB URI');
    }
  } finally {
    await client.close();
    console.log('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  }
}

// ‡∏£‡∏±‡∏ô script
if (require.main === module) {
  debugProducts()
    .then(() => {
      console.log('‚úÖ Debug ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Debug ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
      process.exit(1);
    });
}

module.exports = { debugProducts };
