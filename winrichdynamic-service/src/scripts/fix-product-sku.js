/**
 * Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Product SKU Duplicate Key Error
 * ‡∏£‡∏±‡∏ô script ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */

const { MongoClient } = require('mongodb');

// Configuration
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/winrichdynamic';
const DB_NAME = process.env.DB_NAME || 'winrichdynamic';

async function fixProductSku() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    console.log('üîå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    await client.connect();
    
    const db = client.db(DB_NAME);
    const productsCollection = db.collection('products');
    
    console.log('üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• products...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö products ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ SKU ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ SKU ‡πÄ‡∏õ‡πá‡∏ô null
    const productsWithoutSku = await productsCollection.find({
      $or: [
        { sku: { $exists: false } },
        { sku: null },
        { sku: '' }
      ]
    }).toArray();
    
    console.log(`üìù ‡∏û‡∏ö products ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ SKU: ${productsWithoutSku.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    if (productsWithoutSku.length > 0) {
      console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
      
      for (const product of productsWithoutSku) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á SKU ‡πÉ‡∏´‡∏°‡πà
        const timestamp = Date.now().toString(36);
        const randomStr = Math.random().toString(36).substring(2, 8);
        const prefix = 'PRD';
        const separator = '-';
        
        let newSku = `${prefix}${separator}${timestamp}${separator}${randomStr}`.toUpperCase();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ SKU ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
        let existingProduct;
        let attempts = 0;
        const maxAttempts = 10;
        
        do {
          if (attempts > 0) {
            const extraRandom = Math.random().toString(36).substring(2, 6);
            newSku = `${newSku}${separator}${extraRandom}`.toUpperCase();
          }
          
          existingProduct = await productsCollection.findOne({ sku: newSku });
          attempts++;
        } while (existingProduct && attempts < maxAttempts);
        
        if (attempts >= maxAttempts) {
          console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á SKU ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö product: ${product._id}`);
          continue;
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï product ‡∏î‡πâ‡∏ß‡∏¢ SKU ‡πÉ‡∏´‡∏°‡πà
        const result = await productsCollection.updateOne(
          { _id: product._id },
          { 
            $set: { 
              sku: newSku,
              updatedAt: new Date()
            } 
          }
        );
        
        if (result.modifiedCount > 0) {
          console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç product ${product._id} ‡∏î‡πâ‡∏ß‡∏¢ SKU: ${newSku}`);
        } else {
          console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç product ${product._id} ‡πÑ‡∏î‡πâ`);
        }
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö products ‡∏ó‡∏µ‡πà‡∏°‡∏µ SKU ‡∏ã‡πâ‡∏≥
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SKU ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥...');
    
    const duplicateSkus = await productsCollection.aggregate([
      {
        $group: {
          _id: '$sku',
          count: { $sum: 1 },
          products: { $push: '$_id' }
        }
      },
      {
        $match: {
          count: { $gt: 1 }
        }
      }
    ]).toArray();
    
    if (duplicateSkus.length > 0) {
      console.log(`‚ö†Ô∏è ‡∏û‡∏ö SKU ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥: ${duplicateSkus.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      for (const duplicate of duplicateSkus) {
        console.log(`SKU: ${duplicate._id} ‡∏°‡∏µ ${duplicate.count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç SKU ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å)
        for (let i = 1; i < duplicate.products.length; i++) {
          const productId = duplicate.products[i];
          const timestamp = Date.now().toString(36);
          const randomStr = Math.random().toString(36).substring(2, 8);
          const newSku = `${duplicate._id}-${timestamp}-${randomStr}`.toUpperCase();
          
          const result = await productsCollection.updateOne(
            { _id: productId },
            { 
              $set: { 
                sku: newSku,
                updatedAt: new Date()
              } 
            }
          );
          
          if (result.modifiedCount > 0) {
            console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç duplicate SKU ${productId} ‡πÄ‡∏õ‡πá‡∏ô: ${newSku}`);
          }
        }
      }
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique index ‡∏ö‡∏ô field sku
    console.log('üîê ‡∏™‡∏£‡πâ‡∏≤‡∏á unique index ‡∏ö‡∏ô field sku...');
    
    try {
      await productsCollection.createIndex({ sku: 1 }, { unique: true });
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á unique index ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      if (error.code === 85) {
        console.log('‚ÑπÔ∏è Unique index ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
      } else {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á unique index ‡πÑ‡∏î‡πâ:', error.message);
      }
    }
    
    console.log('üéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await client.close();
    console.log('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  }
}

// ‡∏£‡∏±‡∏ô script
if (require.main === module) {
  fixProductSku()
    .then(() => {
      console.log('‚úÖ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Migration ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
      process.exit(1);
    });
}

module.exports = { fixProductSku };
