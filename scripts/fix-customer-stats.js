/**
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * 
 * ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
 * 1. ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ userId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ô‡∏±‡∏ö‡πÉ‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
 * 2. ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ userId ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 * 3. ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÉ‡∏ô User model ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Order model
 * 4. ‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°
 */

const mongoose = require('mongoose');
require('dotenv').config();

// Import models
const User = require('../src/models/User');
const Order = require('../src/models/Order');

async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ:', error);
    process.exit(1);
  }
}

async function disconnectDB() {
  await mongoose.disconnect();
  console.log('‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
 */
function createPhonePatterns(phoneNumber) {
  const patterns = [];
  
  if (phoneNumber.startsWith('+66')) {
    const numberWithoutPrefix = phoneNumber.substring(3);
    patterns.push(phoneNumber, `0${numberWithoutPrefix}`);
  } else if (phoneNumber.startsWith('0')) {
    const numberWithoutPrefix = phoneNumber.substring(1);
    patterns.push(phoneNumber, `+66${numberWithoutPrefix}`);
  } else if (phoneNumber.startsWith('66')) {
    const numberWithoutPrefix = phoneNumber.substring(2);
    patterns.push(`+${phoneNumber}`, `0${numberWithoutPrefix}`);
  }
  
  return patterns;
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
 */
function calculateCustomerAnalytics(orders) {
  if (orders.length === 0) {
    return {
      totalOrders: 0,
      totalSpent: 0,
      averageOrderValue: 0,
      lastOrderDate: null
    };
  }

  const totalOrders = orders.length;
  const totalSpent = orders.reduce((sum, order) => sum + (order.totalAmount || 0), 0);
  const averageOrderValue = totalSpent / totalOrders;
  const lastOrderDate = new Date(Math.max(...orders.map(o => new Date(o.createdAt))));

  return {
    totalOrders,
    totalSpent,
    averageOrderValue,
    lastOrderDate
  };
}

/**
 * ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 */
function classifyCustomer(analytics) {
  if (analytics.totalOrders === 0) return 'new';
  if (analytics.totalOrders >= 10 || analytics.totalSpent >= 10000) return 'target';
  if (analytics.totalOrders >= 3 || analytics.totalSpent >= 3000) return 'regular';
  return 'new';
}

/**
 * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
async function syncAllOrdersToUsers() {
  console.log('\nüîÑ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
  
  const users = await User.find({ role: 'user' }).select('_id phoneNumber').lean();
  console.log(`‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${users.length} ‡∏Ñ‡∏ô`);
  
  let totalSynced = 0;
  let totalCorrected = 0;
  let errorCount = 0;

  for (const user of users) {
    try {
      const phonePatterns = createPhonePatterns(user.phoneNumber);
      
      // ‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
      const allOrders = await Order.find({
        customerPhone: { $in: phonePatterns }
      }).sort({ createdAt: 1 }).lean();

      let syncedCount = 0;
      let correctedCount = 0;

      for (const order of allOrders) {
        try {
          if (!order.userId) {
            // ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ userId
            await Order.findByIdAndUpdate(order._id, {
              $set: { userId: user._id }
            });
            syncedCount++;
          } else if (order.userId.toString() !== user._id.toString()) {
            // ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ userId ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö user ‡∏ô‡∏µ‡πâ
            const currentUser = await User.findById(order.userId).lean();
            if (!currentUser) {
              // userId ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏ó‡∏µ‡πà user ‡∏ô‡∏µ‡πâ
              await Order.findByIdAndUpdate(order._id, {
                $set: { userId: user._id }
              });
              correctedCount++;
            }
          }
        } catch (error) {
          console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${order._id}:`, error);
        }
      }

      totalSynced += syncedCount;
      totalCorrected += correctedCount;
      
      if (syncedCount > 0 || correctedCount > 0) {
        console.log(`  üì± ${user.phoneNumber}: ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå ${syncedCount}, ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ${correctedCount} ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå`);
      }
      
    } catch (error) {
      console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user._id}:`, error);
      errorCount++;
    }
  }

  console.log(`‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå ${totalSynced}, ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ${totalCorrected}, ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ${errorCount}`);
  return { totalSynced, totalCorrected, errorCount };
}

/**
 * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏£‡∏¥‡∏á
 */
async function updateAllCustomerStatsFromOrders() {
  console.log('\nüìä ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏£‡∏¥‡∏á');
  
  const users = await User.find({ role: 'user' }).select('_id phoneNumber').lean();
  console.log(`‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${users.length} ‡∏Ñ‡∏ô`);
  
  let updatedCount = 0;
  let errorCount = 0;
  let totalOrdersFound = 0;

  for (const user of users) {
    try {
      const phonePatterns = createPhonePatterns(user.phoneNumber);
      
      // ‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
      const allOrders = await Order.find({
        customerPhone: { $in: phonePatterns }
      }).sort({ createdAt: 1 }).lean();

      if (allOrders.length > 0) {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const analytics = calculateCustomerAnalytics(allOrders);
        const customerType = classifyCustomer(analytics);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        await User.findByIdAndUpdate(user._id, {
          $set: {
            customerType,
            totalOrders: analytics.totalOrders,
            totalSpent: analytics.totalSpent,
            averageOrderValue: analytics.averageOrderValue,
            lastOrderDate: analytics.lastOrderDate,
          }
        });

        totalOrdersFound += allOrders.length;
        updatedCount++;
        
        console.log(`  üì± ${user.phoneNumber}: ${analytics.totalOrders} ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå, ‡∏ø${analytics.totalSpent}, ${customerType}`);
      } else {
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        await User.findByIdAndUpdate(user._id, {
          $set: {
            totalOrders: 0,
            totalSpent: 0,
            averageOrderValue: 0,
            lastOrderDate: null,
            customerType: 'new'
          }
        });
        updatedCount++;
        console.log(`  üì± ${user.phoneNumber}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥)`);
      }
      
    } catch (error) {
      console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user._id}:`, error);
      errorCount++;
    }
  }

  console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ${updatedCount}, ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ${errorCount}, ‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${totalOrdersFound} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  return { updatedCount, errorCount, totalOrdersFound };
}

/**
 * ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
async function verifyDataIntegrity() {
  console.log('\nüîç ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  
  const users = await User.find({ role: 'user' }).select('_id phoneNumber totalOrders totalSpent customerType').lean();
  let issuesFound = 0;
  let totalOrdersInDB = 0;

  for (const user of users) {
    try {
      const phonePatterns = createPhonePatterns(user.phoneNumber);
      
      // ‡∏ô‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const actualOrders = await Order.find({
        customerPhone: { $in: phonePatterns }
      }).lean();

      const actualOrderCount = actualOrders.length;
      const actualTotalSpent = actualOrders.reduce((sum, order) => sum + (order.totalAmount || 0), 0);
      
      totalOrdersInDB += actualOrderCount;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
      if (user.totalOrders !== actualOrderCount) {
        console.log(`  ‚ö†Ô∏è  ${user.phoneNumber}: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (User: ${user.totalOrders}, Order: ${actualOrderCount})`);
        issuesFound++;
      }

      if (Math.abs(user.totalSpent - actualTotalSpent) > 0.01) {
        console.log(`  ‚ö†Ô∏è  ${user.phoneNumber}: ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (User: ‡∏ø${user.totalSpent}, Order: ‡∏ø${actualTotalSpent})`);
        issuesFound++;
      }

    } catch (error) {
      console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user._id}:`, error);
    }
  }

  console.log(`‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ${issuesFound} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ${totalOrdersInDB} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
  return { issuesFound, totalOrdersInDB };
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
 */
async function main() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
  console.log('=' .repeat(50));
  
  try {
    await connectDB();

    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
    const syncResult = await syncAllOrdersToUsers();
    
    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const updateResult = await updateAllCustomerStatsFromOrders();
    
    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const verifyResult = await verifyDataIntegrity();

    console.log('\nüéâ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
    console.log('=' .repeat(50));
    console.log(`üì± ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${syncResult.totalSynced} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${syncResult.totalCorrected} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: ${updateResult.updatedCount} ‡∏Ñ‡∏ô`);
    console.log(`üîç ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ${verifyResult.issuesFound} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`üì¶ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${verifyResult.totalOrdersInDB} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    if (verifyResult.issuesFound === 0) {
      console.log('\n‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      console.log('\n‚ö†Ô∏è  ‡∏¢‡∏±‡∏á‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°');
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await disconnectDB();
  }
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  syncAllOrdersToUsers,
  updateAllCustomerStatsFromOrders,
  verifyDataIntegrity
};
